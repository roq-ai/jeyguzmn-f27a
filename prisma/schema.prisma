generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model announcement {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String   @db.VarChar(255)
  content     String
  date_posted DateTime @db.Date
  property_id String   @db.Uuid
  platform_id String   @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  platform    platform @relation(fields: [platform_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  property    property @relation(fields: [property_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model calendar {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date        DateTime @db.Date
  status      String   @db.VarChar(255)
  property_id String   @db.Uuid
  user_id     String   @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  property    property @relation(fields: [property_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user        user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model organization {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?    @db.VarChar(255)
  name        String     @db.VarChar(255)
  created_at  DateTime   @default(now()) @db.Timestamp(6)
  updated_at  DateTime   @default(now()) @db.Timestamp(6)
  user_id     String     @db.Uuid
  tenant_id   String     @db.VarChar(255)
  user        user       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  platform    platform[]
  property    property[]
}

model platform {
  id              String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String         @db.VarChar(255)
  url             String         @db.VarChar(255)
  api_key         String         @db.VarChar(255)
  api_secret      String         @db.VarChar(255)
  organization_id String         @db.Uuid
  created_at      DateTime       @default(now()) @db.Timestamp(6)
  updated_at      DateTime       @default(now()) @db.Timestamp(6)
  announcement    announcement[]
  organization    organization   @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model property {
  id              String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String         @db.VarChar(255)
  location        String         @db.VarChar(255)
  bedrooms        Int
  bathrooms       Int
  organization_id String         @db.Uuid
  user_id         String         @db.Uuid
  created_at      DateTime       @default(now()) @db.Timestamp(6)
  updated_at      DateTime       @default(now()) @db.Timestamp(6)
  announcement    announcement[]
  calendar        calendar[]
  organization    organization   @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user            user           @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String         @unique @db.VarChar(255)
  firstName    String?        @db.VarChar(255)
  lastName     String?        @db.VarChar(255)
  roq_user_id  String         @db.VarChar(255)
  tenant_id    String         @db.VarChar(255)
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @db.Timestamp(6)
  calendar     calendar[]
  organization organization[]
  property     property[]
}
